<?php

/**
 * @file
 * Custom module to hack the jquery_update module.
 */

/**
 * Implements hook_form_alter().
 */
function jquext_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'jquery_update_settings_form') {
    $default_selector = $form['version_options']['jquery_update_jquery_version'];
    if (!isset($default_selector['#options']['1.10.1'])) {
      $form['version_options']['jquery_update_jquery_version']['#options']['1.10.1'] = '1.10.1';
    }
    $admin_selector = $form['version_options']['jquery_update_jquery_admin_version'];
    if (!isset($default_selector['#options']['1.10.1'])) {
      $form['version_options']['jquery_update_jquery_admin_version']['#options']['1.10.1'] = '1.10.1';
    }
  }
}

/**
 * Implements hook_library_alter().
 */
function jquext_library_alter(&$libraries, $module) {
  if ($module == 'system' && isset($libraries['jquery'])) {
    $version = variable_get('jquery_update_jquery_version', '1.10');
    $admin_version = variable_get('jquery_update_jquery_admin_version', '');
    $jquery_update_versions = array('default', '1.5', '1.7', '1.8', '1.9', '1.10');

    if (!empty($admin_version) && path_is_admin(current_path())) {
      if (version_compare($version, $admin_version, '!=')) {
        $version = $admin_version;
      }
    }
    
    // If the ajax version is set then that one always win.
    if (!empty($_POST['ajax_page_state']['jquery_version'])) {
      $ajax_version = $_POST['ajax_page_state']['jquery_version'];
      if (in_array($ajax_version, array('default', '1.5', '1.6', '1.7', '1.8', '1.9', '1.10'))) {
        $version = $ajax_version;
      }
    }

    // Always add a new jquery_version array to ajaxPageState.
    // This is what we used to determine which version to use
    // for any ajax callback.
    $javascript['drupal.ajax']['js'][] = array(
      'data' => array('ajaxPageState' => array('jquery_version' => $version)),
      'type' => 'setting',
    );
    $javascript['drupal.ajax']['dependencies'][] = array('jquery_update', 'jquery_update.ajax.fix');

    // Don't replace anything if Drupal provided jQuery should be used
    if ('default' == $version) {
      return;
    }

    if (!in_array($version, $jquery_update_versions)) {
      $min = variable_get('jquery_update_compression_type', 'min') == 'none' ? '' : '.min';
      $cdn = variable_get('jquery_update_jquery_cdn', 'none');
      $path = drupal_get_path('module', 'prova');
      $libraries['jquery']['version'] = $version;
      switch ($cdn) {
        case 'google':
          $libraries['jquery']['js']['misc/jquery.js']['data'] = '//ajax.googleapis.com/ajax/libs/jquery/' . $version . '/jquery' . $min . '.js';
          $libraries['jquery']['js']['misc/jquery.js']['type'] = 'external';
          jquext_jquery_backup($libraries, $path, $min, $version);
          break;

        case 'microsoft':
          $libraries['jquery']['js']['misc/jquery.js']['data'] = '//ajax.aspnetcdn.com/ajax/jQuery/jquery-' . $version . $min . '.js';
          $libraries['jquery']['js']['misc/jquery.js']['type'] = 'external';
          jquext_jquery_backup($libraries, $path, $min, $version);
          break;

        case 'jquery':
          $libraries['jquery']['js']['misc/jquery.js']['data'] = '//code.jquery.com/jquery-' . $version . $min . '.js';
          $libraries['jquery']['js']['misc/jquery.js']['type'] = 'external';
          jquext_jquery_backup($libraries, $path, $min, $version);
          break;

        case 'none':
        default:
          $libraries['jquery']['js']['misc/jquery.js']['data'] = $path . '/replace/jquery/' . $version . '/jquery' . $min . '.js';
          break;
      }
    }
  }
}

/**
 * Add the local fallback in case jQuery from the CDN is unavailable.
 *
 * @param array $javascript
 *   The $libraries array as seen in hook_library_alter()
 * @param string $path
 *   The path to the module where replacements can be found.
 * @param string $min
 *   The '.min' to include in the file name if we are requesting a minified
 *   version.
 * @param string $version
 *   The verison of jQuery to use.
 */
function jquext_jquery_backup(&$javascript, $path, $min, $version) {
  $javascript['jquery']['js'][0] = array(
    'data' => 'window.jQuery || document.write("<script src=\'' . base_path() . $path . '/replace/jquery/' . $version . '/jquery' . $min . '.js\'>\x3C/script>")',
    'type' => 'inline',
    'group' => JS_LIBRARY,
    'weight' => -19.999999999,
  );
}
